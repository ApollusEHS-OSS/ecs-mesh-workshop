AWSTemplateFormatVersion: 2010-09-09
Description: >
  The CloudFormation template is designed for building ECS cluster & Task deployment.

Parameters:
  baseStackName:
    Description: The name of stack of infrastructure building.
    Type: String
  instanceType:
    Description:  instance tyep for ec2.
    Type: String
    AllowedValues:
      - c4.large
      - c5.large
      - m4.large
      - r4.large
      - r5.large    
    Default: c5.large
  keyPairName:
    Description:  Key pair name for ec2.
    Type: String
    Default: "nx-keypair"
  s3Dns:
    Description:  DNS of S3 endpoint.
    Type: String
    Default: "s3.cn-northwest-1.amazonaws.com.cn"
    #s3.cn-northwest-1.amazonaws.com.cn
    #s3.cn-north-1.amazonaws.com.cn
  s3cf:
    Description:  S3 Bucket name for storage cloudformation templates.
    Type: String
    Default: "cloudformation-box/ecs-star"
  ip4Ec2:
    Description: DNS of the identity provider for EC2
    Type: String
    Default: "ec2.amazonaws.com.cn" 
    #ec2.cn-northwest-1.amazonaws.com.cn
    #ec2.cn-north-1.amazonaws.com.cn
  useSpot:
    Description: Use spot instance or not.
    Type: String
    Default: "yes" 
  volSize:
    Description:  The size of root volume for ec2.
    Type: Number
    Default: 40
  cpuTargetValue:
    Description:  The target value for CPU metric.
    Type: String
    Default: 20
  desiredCount:
    Description:  The number of desired ec2-instance.
    Type: Number
    Default: 4
  onDemandPercentage:
    Description:  On-demand capacity percentage in the whole capacity. On-demand/Spot, example 25->25%.
    Type: Number
    Default: 25
  ecsami:
    Description: ECS AMI ID - The Amazon Machine Image ID used for the cluster, leave it as the default value to get the latest AMI
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Conditions:
  UseSpotCondition: 
    Fn::Equals: 
      - !Ref useSpot
      - "yes"

Resources:
  EcsCluster:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        clusterName: !Sub '${AWS::StackName}-cluster'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-cluster'
      TemplateURL:  !Sub 'https://${s3Dns}/${s3cf}/ecs/ecs-cluster.yaml'
      TimeoutInMinutes: "60"

  EcsNodes:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        keyPairName:  !Ref keyPairName
        ami: !Ref ecsami
        baseVpc: 
          Fn::ImportValue:
            !Sub '${baseStackName}-baseVpc'
        s3cf: !Ref s3cf
        publicSubnet1a:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1aSubnet'
        publicSubnet1b:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1bSubnet'
        publicSubnet1c:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1cSubnet'
        privateSubnet1a:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pri1aSubnet'
        privateSubnet1b:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pri1bSubnet'
        privateSubnet1c:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pri1cSubnet'
        instanceType: !Ref instanceType
        ecsCluster: !GetAtt EcsCluster.Outputs.appEcsCluster
        s3Dns: !Ref s3Dns
        ip4Ec2: !Ref ip4Ec2
        nodesRole: 
          Fn::ImportValue:
             !Sub '${baseStackName}-nodesRole'
        volSize: !Ref volSize
        cpuTargetValue: !Ref cpuTargetValue
        desiredCount: !Ref desiredCount
        onDemandPercentage: !Ref onDemandPercentage
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-ecs-nodes'
      TemplateURL:  
        Fn::If: 
          - UseSpotCondition
          - !Sub 'https://${s3Dns}/${s3cf}/ecs/ecs-nodes-spotasg.yaml'
          - !Sub 'https://${s3Dns}/${s3cf}/ecs/ecs-nodes.yaml'
      TimeoutInMinutes: "60"

  LinkerdViz:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        keyPairName:  !Ref keyPairName
        ami: !Ref ecsami
        baseVpc: 
          Fn::ImportValue:
            !Sub '${baseStackName}-baseVpc'
        s3cf: !Ref s3cf
        publicSubnet1a:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1aSubnet'
        publicSubnet1b:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1bSubnet'
        publicSubnet1c:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1cSubnet'
        instanceType: !Ref instanceType
        ecsCluster: !GetAtt EcsCluster.Outputs.appEcsCluster
        s3Dns: !Ref s3Dns
        ip4Ec2: !Ref ip4Ec2
        nodesRole: 
          Fn::ImportValue:
             !Sub '${baseStackName}-nodesRole'
        volSize: !Ref volSize
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-linkerd-viz'
      TemplateURL:  !Sub 'https://${s3Dns}/${s3cf}/ecs/linkerd-viz.yaml'
      TimeoutInMinutes: "60"

  LinkerdDeamon:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        keyPairName:  !Ref keyPairName
        ami: !Ref ecsami
        publicSubnet1a:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1aSubnet'
        publicSubnet1b:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1bSubnet'
        publicSubnet1c:  
          Fn::ImportValue:
             !Sub '${baseStackName}-pub1cSubnet'
        ecsCluster: !GetAtt EcsCluster.Outputs.appEcsCluster
        nodeSecurityGroupId:  !GetAtt EcsNodes.Outputs.appsvrSecurityGroup
        s3Dns: !Ref s3Dns
        nodesRole: 
          Fn::ImportValue:
             !Sub '${baseStackName}-nodesRole'
      Tags:
        - Key: Name
          Value:  !Sub '${AWS::StackName}-linkerd-daemon'
      TemplateURL:  !Sub 'https://${s3Dns}/${s3cf}/ecs/linkerd-daemons.yaml'
      TimeoutInMinutes: "60"


Outputs:
  appElbTargetGroup:
    Description: ELB target grpup.
    Value:  !GetAtt EcsNodes.Outputs.appElbTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-tg'
  appElasticLoadBalancing:
    Description: ELB target grpup.
    Value:  !GetAtt EcsNodes.Outputs.appElasticLoadBalancing
    Export:
      Name: !Sub '${AWS::StackName}-elb'
  elbDns:
    Description: DNS name of Load Balancer.
    Value:  !GetAtt EcsNodes.Outputs.elbDns
